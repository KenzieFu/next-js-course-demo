{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Udemy\\\\React\\\\Learning\\\\Section23\\\\part2\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MongoClient from 'mongodb/lib/mongo_client';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    title: \"First Meetup\",\n    address: \"Some Street 5, Some City\",\n    description: \"This is a first meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  /*   const meetups= await meetupsCollection.find({},{_id:1}).toArray(); */\n\n  const selectedMeetup = meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some Street 5, Some City',\n        description: 'This is a first meetup'\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/Udemy/React/Learning/Section23/part2/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","getStaticPaths","client","connect","useUnifiedTopology","db","meetupsCollection","collection","selectedMeetup","findOne","_id","meetupId","close","fallback","paths","meetups","map","meetup","params","toString","getStaticProps","context","console","log","props","meetupData","image","id","title","address","description"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,GAAyB;AACvB,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,wHADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAE,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,4GAApB,EAAiI;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GAAjI,CAApB;AAEA,QAAMC,EAAE,GAACH,MAAM,CAACG,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEF;;AAEA,QAAMC,cAAc,GAACF,iBAAiB,CAACG,OAAlB,CAA0B;AAACC,IAAAA,GAAG,EAACC;AAAL,GAA1B,CAArB;AAEET,EAAAA,MAAM,CAACU,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAACC,OAAO,CAACC,GAAR,CAAYC,MAAM,KAAG;AAACC,MAAAA,MAAM,EAAC;AAACP,QAAAA,QAAQ,EAACM,MAAM,CAACP,GAAP,CAAWS,QAAX;AAAV;AAAR,KAAH,CAAlB;AAFD,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAGA,QAAMV,QAAQ,GAAGU,OAAO,CAACH,MAAR,CAAeP,QAAhC;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AAEA,SAAO;AACLa,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,wHAFQ;AAGVC,QAAAA,EAAE,EAAEhB,QAHM;AAIViB,QAAAA,KAAK,EAAE,cAJG;AAKVC,QAAAA,OAAO,EAAE,0BALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD;AAED,eAAe9B,aAAf","sourcesContent":["import MongoClient from 'mongodb/lib/mongo_client';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails() {\n  return (\n    <MeetupDetail\n      image='https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg'\n      title='First Meetup'\n      address='Some Street 5, Some City'\n      description='This is a first meetup'\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const client= await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\",{ useUnifiedTopology: true });\n\n  const db=client.db();\n  const meetupsCollection= db.collection('meetups');\n\n/*   const meetups= await meetupsCollection.find({},{_id:1}).toArray(); */\n\nconst selectedMeetup=meetupsCollection.findOne({_id:meetupId})\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths:meetups.map(meetup=>({params:{meetupId:meetup._id.toString()}}))\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  \n\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData: {\n        image:\n          'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some Street 5, Some City',\n        description: 'This is a first meetup',\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}