{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Udemy\\\\React\\\\Learning\\\\Section23\\\\part2\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MongoClient from 'mongodb/lib/mongo_client';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  const selectedMeetup = meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const client = await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = meetupsCollection.findOne({\n    _id: meetupId\n  });\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/Udemy/React/Learning/Section23/part2/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","image","title","address","description","getStaticPaths","client","connect","useUnifiedTopology","db","meetupsCollection","collection","meetups","find","_id","toArray","selectedMeetup","findOne","meetupId","close","fallback","paths","map","meetup","params","toString","getStaticProps","context","console","log","meetupData"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,IAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,IAAA,OAAO,EAAEF,KAAK,CAACG,OAHjB;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAE,MAAMT,WAAW,CAACU,OAAZ,CAAoB,4GAApB,EAAiI;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GAAjI,CAApB;AAEA,QAAMC,EAAE,GAACH,MAAM,CAACG,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,OAAO,GAAE,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAArB;AAEF,QAAMC,cAAc,GAACN,iBAAiB,CAACO,OAAlB,CAA0B;AAACH,IAAAA,GAAG,EAACI;AAAL,GAA1B,CAArB;AAEEZ,EAAAA,MAAM,CAACa,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAACT,OAAO,CAACU,GAAR,CAAYC,MAAM,KAAG;AAACC,MAAAA,MAAM,EAAC;AAACN,QAAAA,QAAQ,EAACK,MAAM,CAACT,GAAP,CAAWW,QAAX;AAAV;AAAR,KAAH,CAAlB;AAFD,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMrB,MAAM,GAAE,MAAMT,WAAW,CAACU,OAAZ,CAAoB,4GAApB,EAAiI;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GAAjI,CAApB;AAEA,QAAMC,EAAE,GAACH,MAAM,CAACG,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAGF,QAAMK,cAAc,GAACN,iBAAiB,CAACO,OAAlB,CAA0B;AAACH,IAAAA,GAAG,EAACI;AAAL,GAA1B,CAArB;AAEE,QAAMA,QAAQ,GAAGS,OAAO,CAACH,MAAR,CAAeN,QAAhC;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,SAAO;AACLlB,IAAAA,KAAK,EAAE;AACL8B,MAAAA,UAAU,EAACd;AADN;AADF,GAAP;AAKD;AAED,eAAejB,aAAf","sourcesContent":["import MongoClient from 'mongodb/lib/mongo_client';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image={props.image}\n      title={props.title}\n      address={props.address}\n      description={props.description}\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const client= await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\",{ useUnifiedTopology: true });\n\n  const db=client.db();\n  const meetupsCollection= db.collection('meetups');\n\n  const meetups= await meetupsCollection.find({},{_id:1}).toArray();\n\nconst selectedMeetup=meetupsCollection.findOne({_id:meetupId})\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths:meetups.map(meetup=>({params:{meetupId:meetup._id.toString()}}))\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const client= await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\",{ useUnifiedTopology: true });\n\n  const db=client.db();\n  const meetupsCollection= db.collection('meetups');\n\n\nconst selectedMeetup=meetupsCollection.findOne({_id:meetupId})\n\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData:selectedMeetup\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}