{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Udemy\\\\React\\\\Learning\\\\Section23\\\\part2\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MongoClient from 'mongodb/lib/mongo_client';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n/* import ObjectId from \"mongodb\"; */\n\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.image,\n      title: props.title,\n      address: props.address,\n      description: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId); // fetch data for a single meetup\n\n  const client = await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  console;\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/Udemy/React/Learning/Section23/part2/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","Head","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","useUnifiedTopology","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne","id"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA;;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE;AAAA,4BACA,QAAC,IAAD;AAAA,8BACA;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAKF,QAAC,YAAD;AACI,MAAA,KAAK,EAAEH,KAAK,CAACI,KADjB;AAEI,MAAA,KAAK,EAAEJ,KAAK,CAACE,KAFjB;AAGI,MAAA,OAAO,EAAEF,KAAK,CAACK,OAHnB;AAII,MAAA,WAAW,EAAEL,KAAK,CAACG;AAJvB;AAAA;AAAA;AAAA;AAAA,YALE;AAAA,kBADF;AAcD;;AAED,OAAO,eAAeG,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAE,MAAMX,WAAW,CAACY,OAAZ,CAAoB,4GAApB,EAAiI;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GAAjI,CAApB;AAEA,QAAMC,EAAE,GAACH,MAAM,CAACG,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,OAAO,GAAE,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAArB;AAGAT,EAAAA,MAAM,CAACU,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAACN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAG;AAACC,MAAAA,MAAM,EAAC;AAACC,QAAAA,QAAQ,EAACF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAV;AAAR,KAAH,CAAlB;AAFD,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAJ4C,CAK5C;;AACA,QAAMhB,MAAM,GAAE,MAAMX,WAAW,CAACY,OAAZ,CAAoB,4GAApB,EAAiI;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GAAjI,CAApB;AAEA,QAAMC,EAAE,GAACH,MAAM,CAACG,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAGF,QAAMiB,cAAc,GAAC,MAAMlB,iBAAiB,CAACmB,OAAlB,CAA0B;AAACf,IAAAA,GAAG,EAACQ;AAAL,GAA1B,CAA3B;AACEI,EAAAA,OAAO;AAEPpB,EAAAA,MAAM,CAACU,KAAP;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAC;AACT8B,QAAAA,EAAE,EAACF,cAAc,CAACd,GAAf,CAAmBS,QAAnB,EADM;AAETtB,QAAAA,KAAK,EAAC2B,cAAc,CAAC3B,KAFZ;AAGTG,QAAAA,OAAO,EAACwB,cAAc,CAACxB,OAHd;AAITD,QAAAA,KAAK,EAACyB,cAAc,CAACzB,KAJZ;AAKTD,QAAAA,WAAW,EAAC0B,cAAc,CAAC1B;AALlB;AADN;AADF,GAAP;AAWD;AAED,eAAeJ,aAAf","sourcesContent":["import MongoClient from 'mongodb/lib/mongo_client';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n/* import ObjectId from \"mongodb\"; */\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  return (\n    <>\n    <Head>\n    <title>{props.meetupData.title}</title>\n    <meta name='description' content={props.meetupData.description} />\n  </Head>\n  <MeetupDetail\n      image={props.image}\n      title={props.title}\n      address={props.address}\n      description={props.description}\n    /></>\n    \n  );\n}\n\nexport async function getStaticPaths() {\n  const client= await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\",{ useUnifiedTopology: true });\n\n  const db=client.db();\n  const meetupsCollection= db.collection('meetups');\n\n  const meetups= await meetupsCollection.find({},{_id:1}).toArray();\n\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths:meetups.map(meetup=>({params:{meetupId:meetup._id.toString()}}))\n  };\n}\n\nexport async function getStaticProps(context) {\n\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n  // fetch data for a single meetup\n  const client= await MongoClient.connect(\"mongodb+srv://Kenzie:yXNI62ta9oG0vY2j@atlascluster.vusu1g1.mongodb.net/meetups?retryWrites=true&w=majority\",{ useUnifiedTopology: true });\n\n  const db=client.db();\n  const meetupsCollection= db.collection('meetups');\n\n\nconst selectedMeetup=await meetupsCollection.findOne({_id:meetupId })\n  console\n\n  client.close();\n  return {\n    props: {\n      meetupData:{\n        id:selectedMeetup._id.toString(),\n        title:selectedMeetup.title,\n        address:selectedMeetup.address,\n        image:selectedMeetup.image,\n        description:selectedMeetup.description\n      }\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}